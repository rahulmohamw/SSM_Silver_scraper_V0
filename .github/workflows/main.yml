name: SMM Silver Price Scraper

on:
  schedule:
    # Run daily at 10:00 AM UTC (adjust timezone as needed)
    - cron: '30 4 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [main]
    paths: ['**.py', '**.yml']

jobs:
  scrape:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: Create directories
      run: |
        mkdir -p csv screenshots logs
        
    - name: Run scraper
      run: |
        echo "üöÄ Starting scraper..."
        python main_scraper.py
        echo "‚úÖ Scraper execution completed"
        
    - name: List generated files
      run: |
        echo "üìÅ Current directory contents:"
        ls -la
        echo ""
        echo "üìä CSV files:"
        find csv/ -type f -name "*.csv" 2>/dev/null && ls -la csv/ || echo "No CSV files found"
        echo ""
        echo "üì∏ Screenshot files:"
        find screenshots/ -type f \( -name "*.png" -o -name "*.jpg" \) 2>/dev/null && ls -la screenshots/ || echo "No screenshot files found"
        echo ""
        echo "üìù Log files:"
        find logs/ -type f -name "*.log" 2>/dev/null && ls -la logs/ || echo "No log files found"
        echo ""
        echo "üîç Checking if files were created:"
        echo "CSV count: $(find csv/ -type f -name "*.csv" 2>/dev/null | wc -l)"
        echo "Screenshot count: $(find screenshots/ -type f \( -name "*.png" -o -name "*.jpg" \) 2>/dev/null | wc -l)"
        echo "Log count: $(find logs/ -type f -name "*.log" 2>/dev/null | wc -l)"
        
    - name: Create dummy files if none exist (for artifact upload)
      run: |
        # Create dummy files if directories are empty to avoid upload warnings
        if [ ! "$(ls -A csv/)" ]; then
          echo "timestamp,date,rate,raw_date,scrape_time" > csv/no_data_generated.csv
          echo "$(date '+%Y-%m-%d %H:%M:%S'),$(date '+%Y-%m-%d'),0,No data,$(date '+%H:%M:%S')" >> csv/no_data_generated.csv
          echo "üìù Created dummy CSV file"
        fi
        
        if [ ! "$(ls -A screenshots/)" ]; then
          echo "No screenshots were generated during this run" > screenshots/no_screenshots.txt
          echo "üìù Created placeholder for screenshots"
        fi
        
        if [ ! "$(ls -A logs/)" ]; then
          echo "No log files were generated" > logs/no_logs.txt
          echo "üìù Created placeholder for logs"
        fi
        
    - name: Upload CSV files
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: csv-data-${{ github.run_number }}
        path: csv/
        retention-days: 90
        
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: screenshots-${{ github.run_number }}
        path: screenshots/
        retention-days: 30
        
    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: logs-${{ github.run_number }}
        path: logs/
        retention-days: 7
        
    - name: Commit and push data (optional)
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add csv/ screenshots/ logs/ || true
        git diff --staged --quiet || git commit -m "Update scraper data - $(date '+%Y-%m-%d %H:%M:%S')"
        git push || echo "Nothing to push"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: scrape
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.scrape.result == 'success'
      run: echo "‚úÖ Scraping completed successfully!"
      
    - name: Notify failure
      if: needs.scrape.result == 'failure'
      run: |
        echo "‚ùå Scraping failed!"
        exit 1
